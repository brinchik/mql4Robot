//+------------------------------------------------------------------+
//|                                                    BuySellStop.mq4|
//|                                  Copyright 2023, Example, Inc.    |
//|                                              https://example.com/ |
//+------------------------------------------------------------------+

// Входные параметры
input double Take_BuyPrice = 1.10495;
input double Buy_Price = 1.10495;
input double Stop_BuyPrice = 1.10495;
input double Stop_SellPrice = 1.10495;
input double Sell_Price = 1.10495;
input double Take_SellPrice = 1.10495;
input double slippage = 2;
input double lotsize = 0.1;

// Объявляем глобальные переменные
int MagicNumber = 003;

bool sellStopOrderSent0 = false;
bool buyStopOrderSent0 = false;

bool sellStopOrderSent = false;
bool buyStopOrderSent = false;

int stopLossHits = 0; // Количество закрытий позиции по стоп-лоссу

double StopLossDayH = 0;
double StopLossDayL = 0;

double lotss = 0;

//+------------------------------------------------------------------+
input datetime MyDate = D'2022.01.10';
// Получение максимума и минимума конкретного дня
datetime date = MyDate;
double dayHigh = iHigh(_Symbol, PERIOD_D1, iBarShift(_Symbol, PERIOD_D1, date)); // получаем максимум за день
double dayLow = iLow(_Symbol, PERIOD_D1, iBarShift(_Symbol, PERIOD_D1, date));   // получаем минимум за день
//+------------------------------------------------------------------+

bool hasPosition = false;

//+-------------------------Макс.Мин прошлого дня-----------------------------------------+
datetime last_candle_time;
datetime prev_day_start_time;
int last_candle_index;
int prev_day_index;
int prev_day_of_week;
double prevDayHight;
double prevDayLow;

bool isOrderCloseAllExecuting = false; // глобальная переменная
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+

void OnTrade(){
    int ordersTotal = OrdersTotal();
    for (int i = 0; i < ordersTotal; i++)
    {
        // Получаем информацию об открытом ордере
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            // Проверяем, является ли ордер открытой позицией (не является ли он отложенным ордером)
            if (OrderType() == OP_BUY || OrderType() == OP_SELL)
            {
                hasPosition = true;
               
            }
            else
            {
                hasPosition = false;
            }
        }
    }
}
void OnTick()
{

    //+-------------------------Макс.Мин прошлого дня-----------------------------------------+
    // Получаем текущее время
    datetime currentTime = TimeCurrent();

    // Получаем время последней свечи
    last_candle_time = Time[0];

    // Получаем время начала предыдущего торгового дня
    prev_day_start_time = iTime(_Symbol, PERIOD_D1, 1);
    prev_day_of_week = TimeDayOfWeek(prev_day_start_time);
    while (prev_day_of_week == 0 || prev_day_of_week == 6)
    {
        // Если предыдущий день выходной, уменьшаем дату на один день
        prev_day_start_time -= PeriodSeconds(PERIOD_D1);
        prev_day_of_week = TimeDayOfWeek(prev_day_start_time);
    }

    // Если текущее время равно 23:55, обновляем переменные prevDayHight и prevDayLow
    if (!hasPosition){
    if (TimeHour(currentTime) == 00 && TimeMinute(currentTime) == 15)
    {
        // Получаем индекс последней свечи на дневном графике
        last_candle_index = iBarShift(_Symbol, PERIOD_D1, last_candle_time);

        // Получаем индекс свечи предыдущего дня на дневном графике
        prev_day_index = iBarShift(_Symbol, PERIOD_D1, prev_day_start_time);

        // Получаем максимум и минимум предыдущего дня
        prevDayHight = iHigh(_Symbol, PERIOD_D1, prev_day_index);
        prevDayLow = iLow(_Symbol, PERIOD_D1, prev_day_index);
    }
    // Проверяем, соответствует ли текущее время началу нового дня
    if (TimeHour(currentTime) == 0 && TimeMinute(currentTime) == 5) {
        // Обнуляем флаги переменных
        buyStopOrderSent0 = false;
sellStopOrderSent0 = false;
    }
}




 datetime currentTimeStartTrade = TimeLocal();
    if (TimeHour(currentTimeStartTrade) == 0 && TimeMinute(currentTimeStartTrade) == 30 && !hasPosition)
    {
        //+-------------------------Запуск торгов-----------------------------------------+
        if (!buyStopOrderSent0)
        {
            bool result0 = OrderSend(Symbol(), OP_BUYSTOP, lotsize, prevDayHight - 100 * Point, 3, prevDayHight -100 * Point - 200 * Point, prevDayHight - 100 * Point + 152 * Point, "my comment", 2222); // Отправляем ордер на торговый сервер
            buyStopOrderSent0 = true;
        }
        if (!sellStopOrderSent0)
        {
            bool result00 = OrderSend(Symbol(), OP_SELLSTOP, lotsize, prevDayLow +100 * Point , 3, prevDayLow + 100 * Point + 200 * Point, prevDayLow + 100 * Point - 152 * Point, "my comment", 3333); // Отправляем ордер на торговый сервер
            sellStopOrderSent0 = true;
        }
    }

    //+-------------------------Удаление противоположного ордера при активации первого-----------------------------------------+
    for (int q = 0; q < OrdersTotal(); q++)
    {
        if (OrderSelect(q, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderType() == OP_BUY && OrderMagicNumber() == 2222)
            {
                // Удалить sellstop по магическому номеру 2222
                for (int q1 = OrdersTotal() - 1; q1 >= 0; q1--)
                {
                    if (OrderSelect(q1, SELECT_BY_POS, MODE_TRADES))
                    {
                        if (OrderType() == OP_SELLSTOP && OrderMagicNumber() == 3333)
                        {
                            if (OrderDelete(OrderTicket()))
                            {
                                Print("Успешно удален ордер ", OrderTicket());
                            }
                            else
                            {
                                Print("Ошибка при удалении ордера ", OrderTicket());
                            }
                            break;
                        }
                    }
                }
            }
            else if (OrderType() == OP_SELL && OrderMagicNumber() == 3333)
            {
                // Удалить buystop по магическому номеру 3333
                for (int q2 = OrdersTotal() - 1; q2 >= 0; q2--)
                {
                    if (OrderSelect(q2, SELECT_BY_POS, MODE_TRADES))
                    {
                        if (OrderType() == OP_BUYSTOP && OrderMagicNumber() == 2222)
                        {
                            if (OrderDelete(OrderTicket()))
                            {
                                Print("Успешно удален ордер ", OrderTicket());
                            }
                            else
                            {
                                Print("Ошибка при удалении ордера ", OrderTicket());
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
int ordersTotal1 = OrdersTotal();
        int ordersTotal2 = OrdersHistoryTotal();


datetime curDay = iTime(_Symbol, PERIOD_D1, 0); // время начала текущего дня
datetime lastBarClose = Time[0]; // время закрытия бара текущего дня


    for (int cl5 = ordersTotal1 - 1; cl5 >= 0; cl5--)
                {
                    if (OrderSelect(cl5, SELECT_BY_POS, MODE_TRADES))
                    {
                        if (OrderType() == OP_BUYLIMIT || OrderType() == OP_SELLLIMIT ||
                            OrderType() == OP_SELLSTOP || OrderType() == OP_BUYSTOP)
                        {
                            if (OrderOpenTime() < curDay && lastBarClose > curDay) // проверка, что ордер не сработал к концу дня
                            {
                                OrderDelete(OrderTicket());
                                buyStopOrderSent0 = false;
                                    sellStopOrderSent0 = false;
                                  
                            }
                        }
                    }
                }
}